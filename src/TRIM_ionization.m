function [Target_depth,IONIZ_IONS,IONIZ_RECOILS] = TRIM_ionization(filename)
%TRIM_IONIZATION Import IONIZ.TXT from srim simulations.
%   [Target_depth,IONIZ_IONS,IONIZ_RECOILS] = TRIM_ionization(filename)
%
%   Reads in the three columns with the 100 lines for any case of IONIZ.TXT
%   irrelevant of the amount of layers used and the like.
% 
% 
% Energy Loss to Ionization
% 
% The datafile, ../SRIM Outputs/IONIZ.txt, and the plot summaries the energy loss to the target electrons within the target window. 
% The datafile IONIZ.txt is created once, when the button is pressed (see example below), and summarizes the calculation to that point.
% The plot is created when the button is pressed, and then updated after each ion. The continuous display of the plot slows down the calculation.
% 
% This plot and file contains the energy given up to the target electrons. The data relating to "Ions" is the direct energy transferred from the ion to the target electrons. The data relating to the "Recoils" is energy transferred from recoiling target atoms to the target electrons.
% 
% The energy loss to target phonons consists of the direct creation of phonons by the ion, and the additional energy loss by target recoil atoms to phonons. For details, press the button "Help, FAQ and Scientific Explanation" in the TRIM window. See the general Help item:  The Scientific Background to TRIM. The creation of target ionization is quite complicated - for details see the SRIM textbook, chapters 3 amd 4.
% 
% Example:
%   [Target_depth,IONIZ_IONS,IONIZ_RECOILS] = importfile('IONIZ.txt');
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/07/13 11:35:34
% Adjusted by Pieter Oliver 2015.July

%% Section selects the 100 lines to be read into the variables. (handles any amount of layers)
Nrows = numel(textread(filename,'%1c%*[^\n]'));
    startRow = Nrows-99;
    endRow = Nrows;


%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%12f%12f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Target_depth = dataArray{:, 1};
IONIZ_IONS = dataArray{:, 2};
IONIZ_RECOILS = dataArray{:, 3};

